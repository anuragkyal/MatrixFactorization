The page rank algortihm is coded out in java using the formula provided in the assignment. The code is quite modular.

Data Structure:
I have used a class Page with the following definition:

class Page{
    int children;
    List<Integer> parentIds;
    double score;
    double oldScore;
}

The entire code works around an array of Page objects where each page object represents a single Page that is to be ranked. The properties of the class are intuitive but in case:
children: Count of the number of outbound links from a page
parentIds: This is a list of array ids which correspond to the pages that are parents of this page, ie. there is a link to this page from the the page corresponding to the id
score: This is the current PR score of the page
oldScore: This is the PR score of the page in the previous iteration

Methods:
Private: These are helper methods which facilitate the public methods.
Page[] getFreshPageArray(int nodeCount): This array initializes an array of Page. The number of pages in the array is equal to nodeCount. The score of each page is made equal to 1/nodeCount.

Page[] populatePages(Page[] pages, String[] edgesRep): This method takes the array initialized in the getFreshPageArray method and a list of strings representing edge configuration among the pages and populates the page objects in the array with the details like parents, children etc.

Page[] handleSinkPages(Page[] pages): This method is designed to specifically handle sink pages

Page[] updateScore(Page[] pages): This method uses the PR formulata to update the score. Calling this function is considered to be one iteration

double pageScoresDiff(Page[] pages): This method calculates the difference in the scores of all the pages between the current iteration and the last iteration

Public:
Page[] getPageArray(): This function calls getFreshPageArray and populatePages to initialize an array of pages with all relevant information

Page[] runRandomWalk(Page[] pages): This function iterates the updation of the scores for pages till the difference in score becomes 0. The Page array returned by this function contains the final scores
